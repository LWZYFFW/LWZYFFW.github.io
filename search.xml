<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面试题</title>
    <url>/2019/12/06/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol start="2">
<li><p>List、Set、Map 之间的区别是什么？</p>
<ul>
<li>List:有序,可重复,可为空</li>
<li>Set:无序,不可重复,一个元素为空</li>
<li>Map:无序,key可以有一个为空,不可重复,value可以有多个</li>
</ul>
</li>
<li><p>List 实现类  arraylist,vector与linkedlist区别</p>
<ul>
<li>arraylist与vector基于动态数组,查找效率高.</li>
<li>vector线程安全的,所以性能不如arraylist,其他两个都不是线程安全</li>
<li>linkedlist基于链表,新增和删除效率高</li>
</ul>
</li>
<li><p>Map实现类 HashMap与HashTable区别</p>
<ul>
<li>HashMap是HashTable的轻量级实现</li>
<li>HashMap线程不安全,效率高,允许key或value的值为null,而HashTable相反</li>
</ul>
</li>
<li><p>Set实现类 HashSet,LinkedHashSet,TreeSet</p>
<ul>
<li>HashSet与Set相同特点</li>
<li>LinkedHashSet 有序的,访问全部元素比HashSet效率高;插入就不如HashSet</li>
<li>TreeSet:不能写入null,有序的</li>
</ul>
</li>
<li><p>HashMap的底层实现,如何扩容</p>
<blockquote>
<p>底层是数组结构Entry[] table,每一个数组entry元素都存储一个key,value对以及指向下一个Entry的引用,这样就构成了链表;</p>
</blockquote>
<blockquote>
<p>扩容:数组的默认大小是16,加载因子是0.75,当存入超过12个键值对时就会扩容,扩大2倍;公式为:数组大小 = (存入数量/0.75)大于这个数字的最小的2的幂</p>
</blockquote>
<blockquote>
<p>map.put时,根据key的hsahcode计算hash值,根据hash得到数组下标,把元素放在这里,如果这个位置已经有元素了,就以链表形式放在链头;</p>
</blockquote>
<blockquote>
<p>根据hash值计算数组下标:hash值&amp;(数组长度-1); 等价于 hash % length</p>
</blockquote>
<blockquote>
<p>如果两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value</p>
</blockquote>
</li>
<li><p>String</p>
<ol>
<li>String类被final修饰,不能被继承;String通过char数组保存字符串</li>
<li>String方法改变字符串时会生成新对象,不会影响原来的String对象</li>
<li>String字符串在 方法区的运行时常量池</li>
<li>String的equals方法比较两字符串的值,==比较地址</li>
<li>String、StringBuffer、StringBuilder的区别<ol>
<li>String不可变因为底层时final的char数组,StringBuffer与StringBuilder底层是普通的char数组</li>
<li>StringBuilder线程不安全,StringBuffer线程安全</li>
<li>StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</li>
<li>string可以=null;他们不行</li>
</ol>
</li>
</ol>
</li>
<li><p>equals方法和==的区别</p>
<ul>
<li>基本数据类型:==比较值相等,没有equals</li>
<li>引用数据类型:==与equals都调用object.equals(),比较内存地址</li>
<li>String:重写了equals方法,比较字符串的值,==比较内存地址</li>
</ul>
</li>
<li><p>线程</p>
<ol>
<li><p>线程实现方式  </p>
<ul>
<li>继承Thread类,重写run()方法,调用该类实例的start方法启动线程</li>
<li>实现Runnable接口,重写run()方法,将该类的实例放入Thread类实例中(构造方法);Thread的start方法启动线程</li>
<li>Callable和Future创建线程:创建Callable接口的实现类重写call()方法,使用FutureTask类包装,再用Thread包装并start启动</li>
</ul>
</li>
<li><p>线程的状态</p>
<ol>
<li>创建-就绪-运行-阻塞-销毁</li>
</ol>
</li>
<li><p>线程池的了解</p>
<ol>
<li>执行Runnable任务:  <ul>
<li>ExecutorService实例的execute(Runnable对象)</li>
</ul>
</li>
<li>执行Callable任务<ul>
<li>Future对象接受ExecutorService实例的Submit(Callable实现类实例)方法返回的对象</li>
</ul>
</li>
</ol>
</li>
<li><p>synchronized可以修饰类,方法,代码块,不具有继承性</p>
</li>
</ol>
</li>
<li><p>jvm包括以及作用,内存溢出与内存泄漏</p>
<ol>
<li>包括:程序计数器,本地方法栈,虚拟机栈,堆,方法区<ol>
<li>程序计数器记录字节码指令执行的位置</li>
<li>本地方法栈提供native方法</li>
<li>虚拟机栈包括:每个方法都有一个栈帧用于存储局部变量表,操作数栈,动态连接,方法出口等信息</li>
<li>堆,存放对象实例和数组:包括新生代(Eden,from,to(8:1:1)),老年代(1:2)<ol>
<li>垃圾回收<ol>
<li>判断对象已死:引用计数法(循环引用问题),可达性分析法</li>
<li>垃圾回收算法:<ul>
<li>标记清除算法,复制算法,标记整理算法,分代回收</li>
<li>回收流程:基于分代回收<blockquote>
<p>堆中的对象实例在优先放在在新生代的Eden,Eden未满时使用 标记清除算法,当Eden内存不够存放新的对象时,使用复制算法,将Eden中存活的对象复制到from中,清空Eden.Eden和from都满的时候,复制算法将Eden和from存活的对象复制到to,清空Eden和from,将to改名为from,from改名为to,直到to中不足以存放Eden和from的对象时,将对象直接放到老年代,老年代被放满的时候用标记整理算法清除老年代中的死对象,并将存活对象整理到一起</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
<li>内存溢出与内存泄漏<ol>
<li>内存泄漏:程序申请内存后无法释放已申请的内存空间,导致系统无法及时回收内存给其他程序使用,多次内存泄漏就会导致内存溢出</li>
<li>内存溢出:没有足够的内存给程序申请使用</li>
</ol>
</li>
</ol>
</li>
<li>方法区存储class文件信息和运行时常量池;class文件信息包括类信息和静态常量池;运行时常量池在运行时将静态常量池例的内容移动到运行时常量池中;jdk1.8之前字符串常量池在运行时常量池中,1.8开始String常量池放到了堆中</li>
</ol>
</li>
</ol>
</li>
<li><p>Spring</p>
<ol start="2">
<li>IOC</li>
<li>AOP</li>
<li>mvc流程<blockquote>
<p>1.客户端发送请求，请求交给前端控制器，前端控制器把请求交给映射处理器。  </p>
</blockquote>
</li>
<li>映射处理器绑定一个控制器类（进行业务处理），返回结果给前端控制器  </li>
<li>前端控制器调用控制器的方法，处理业务（调用业务层，业务层调用持久层），把模型和视图封装成ModelAndView对象返回。  </li>
<li>前端控制器调用视图解析器，解析视图，把结果返回给前端控制器。  </li>
<li>前端控制器响应视图到客户端。  </li>
</ol>
</li>
<li><p>mybatis注解,$ #  核心jdbc封装<br> @Insert,@Select,@Delete,@Update</p>
<ul>
<li>${}:解析阶段直接进行字符串替换</li>
<li>#{}:先将#{}解析成占位符?,    再进行替换<blockquote>
<p> #{}更安全,可以防止sql注入漏洞<br> #{ }会为变量加上单引号，比如：SELECT * FROM student WHERE name = “小明”,这个语句中 “小明” 就是当作字符串来解析的，使用 #{ }是正合适的，但是当语句为 SELECT * FROM student ORDER BY id时，id 如果使用 #{ }，语句会被解析成 SELECT * FROM student ORDER BY ‘id’，那么这种情况就不得不使用 ${}</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Tomcat</p>
<ol>
<li>bin的命令文件:startup.sh  shutdown.sh</li>
</ol>
</li>
<li><p>设计模式举例 单例模式</p>
<ol>
<li>单例模式确保一个类只有一个实例:<ol>
<li>懒汉式-创建static null;调用get方法才实例化</li>
<li>饿汉式-先创建好实例化,get方法直接返回</li>
</ol>
</li>
</ol>
</li>
<li><p>数据结构:B树 B+树(文件系统和数据库) 红黑树(java中的TreeSet,TreeMap)</p>
</li>
<li><p>进制运算转换,移位运算,与或非</p>
<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2></li>
<li><p>基础语法</p>
<ol>
<li>order by id desc :降序排列</li>
<li>group by 与 having<ol>
<li>凡是在group by后面出现的字段，必须同时在select后面出现；</li>
<li>凡是在select后面出现的、同时未在聚合函数中出现的字段，必须同时出现在group by后面</li>
<li>having 子句被限制子已经在SELECT语句中定义的列和聚合表达式上</li>
<li>group by 必须放在 order by 和 limit之前，不然会报错</li>
</ol>
</li>
<li>limit n,m<ol>
<li>n:从第n条的下一条开始,m:查出m条数据</li>
<li>limit m 查出前m条数据</li>
<li>limit 4,-1 ; –从第5个数据开始包括（5），一直到最后</li>
</ol>
</li>
<li>去重 distinct <ol>
<li>只能用在select<ul>
<li>select distinct name from table_name;</li>
</ul>
</li>
<li>distinct必须放在开头</li>
<li>使得DISTINCT 只对其中某一项生效<ul>
<li>SELECT  group_concat(DISTINCT province) AS province, city FROM test_distinct GROUP BY province;</li>
</ul>
</li>
</ol>
</li>
<li>update<ul>
<li>UPDATE Person SET Address = ‘Zhongshan 23’, City = ‘Nanjing’<br>WHERE LastName = ‘Wilson’</li>
</ul>
</li>
<li>delete<ul>
<li>DELETE FROM Person WHERE LastName = ‘Wilson’ </li>
</ul>
</li>
<li>insert<ul>
<li>INSERT INTO table_name (列1, 列2,…) VALUES (值1, 值2,….)</li>
</ul>
</li>
<li>union 与 union all<ol>
<li>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</li>
<li>UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</li>
<li>union all 允许重复的值</li>
</ol>
</li>
</ol>
</li>
<li><p>Where, Group By, Having, Order by顺序执行</p>
</li>
<li><p>多表连接查询 join on</p>
<ol>
<li>join:内连接只显示两个表的匹配数据</li>
<li>left join:返回左表的全部行和右表满足ON条件的行，如果左表的行在右表中没有匹配，那么这一行右表中对应数据用NULL代替</li>
<li>right join:返回右表的全部行和左表满足ON条件的行，如果右表的行在左表中没有匹配，那么这一行左表中对应数据用NULL代替</li>
<li>full join:会从左表 和右表 那里返回所有的行。如果其中一个表的数据行在另一个表中没有匹配的行，那么对面的数据用NULL代替</li>
</ol>
</li>
<li><p>sql优化</p>
<blockquote>
</blockquote>
<pre><code>1、在表中建立索引，优先考虑where、group by使用到的字段。

2、尽量避免使用select *，返回无用的字段会降低查询效率。如下：
SELECT * FROM t 
优化方式：使用具体的字段代替*，只返回使用到的字段。

3、尽量避免使用in 和not in，会导致数据库引擎放弃索引进行全表扫描。如下：
SELECT * FROM t WHERE id IN (2,3)

SELECT * FROM t1 WHERE username IN (SELECT username FROM t2)

优化方式：如果是连续数值，可以用between代替。如下：

SELECT * FROM t WHERE id BETWEEN 2 AND 3

如果是子查询，可以用exists代替。如下：

SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2 WHERE t1.username = t2.username)</code></pre></li>
</ol>
<pre><code>4、尽量避免使用or，会导致数据库引擎放弃索引进行全表扫描。如下：

SELECT * FROM t WHERE id = 1 OR id = 3

优化方式：可以用union代替or。如下：

SELECT * FROM t WHERE id = 1
UNION
SELECT * FROM t WHERE id = 3

（PS：如果or两边的字段是同一个，如例子中这样。貌似两种方式效率差不多，即使union扫描的是索引，or扫描的是全表）



5、尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描。如下：

SELECT * FROM t WHERE username LIKE &apos;%li%&apos;

优化方式：尽量在字段后面使用模糊查询。如下：

SELECT * FROM t WHERE username LIKE &apos;li%&apos;



6、尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。如下：

SELECT * FROM t WHERE score IS NULL

优化方式：可以给字段添加默认值0，对0值进行判断。如下：

SELECT * FROM t WHERE score = 0



7、尽量避免在where条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。如下：

SELECT * FROM t2 WHERE score/10 = 9

SELECT * FROM t2 WHERE SUBSTR(username,1,2) = &apos;li&apos;

优化方式：可以将表达式、函数操作移动到等号右侧。如下：

SELECT * FROM t2 WHERE score = 10*9

SELECT * FROM t2 WHERE username LIKE &apos;li%&apos;



8、当数据量大时，避免使用where 1=1的条件。通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。如下：

SELECT * FROM t WHERE 1=1

优化方式：用代码拼装sql时进行判断，没where加where，有where加and。</code></pre><ol start="4">
<li><p>引擎:MyISAM 和 InnoDB</p>
<ol>
<li><p>区别</p>
<ol>
<li><p>InnoDB支持事务，MyISAM不支持</p>
<blockquote>
<p>对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；</p>
</blockquote>
</li>
<li><p>InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转为MYISAM会失败；</p>
</li>
<li><p>InnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。<br> 但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此主键不应该过大，因为主键太大，其他索引也都会很大。<br> 而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</p>
</li>
<li><p>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</p>
</li>
<li><p>Innodb不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高；</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>事务</p>
<ol>
<li>什么是事务<blockquote>
<p>事务是由一步或几步数据库操作序列组成逻辑执行单元，这系列操作要么全部执行，要么全部放弃执行。程序和事务是两个不同的概念。一般而言：一段程序中可能包含多个事务</p>
</blockquote>
</li>
<li>深入理解<blockquote>
<p>待写</p>
</blockquote>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2></li>
</ol>
</li>
<li><p>常用命令</p>
<ul>
<li>pwd 显示工作路径 </li>
<li>jsp java进程</li>
<li>sudo 以管理员身份执行命令</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试</title>
    <url>/2019/12/04/%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h1 id="反省自己"><a href="#反省自己" class="headerlink" title="反省自己"></a>反省自己</h1><ol>
<li>基础不扎实,能力不足</li>
<li>不能被面试官带着走,问啥答啥;要陈述+原因+理由</li>
<li>没有证书证明自己,只能靠技术</li>
<li>实习生面试一般问基础,至今还没有问spring框架的</li>
<li><strong>言语之间表现出自己的入职欲望+理由</strong></li>
<li>面试官会从你的表现中得到:语言表达能力,性格,技术水平等</li>
<li>自信是很大的加分项,谁都不喜欢与闷油瓶在一起工作;</li>
</ol>
<hr>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客</title>
    <url>/2019/11/28/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h2><p>hexo在本地搭建博客框架</p>
<ul>
<li>放到github上可以外网访问</li>
<li>内网穿透本地服务器,使用厂商提供的域名</li>
<li>直接购买云厂商的域名+云服务器配套服务</li>
</ul>
<h2 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h2><ul>
<li>找国内的域名注册厂商,可以注册中文域名</li>
<li>必须要实名认证和备案,否则不能使用</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title>厉害的博客</title>
    <url>/2019/11/27/%E5%A4%A7%E4%BD%AC%E4%BB%AC/</url>
    <content><![CDATA[<p>这里用来记录我发现的各种大佬,大神们:</p>
<ul>
<li><a href="http://saili.science/" target="_blank" rel="noopener">Alex Lee</a><ul>
<li>搜索hexo主题的时候发现的大佬的博客,顿时被惊艳到,不仅有各种奇淫技巧;关键是这个<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a>主题高大上;果断偷师</li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方教程</a></li>
<li><a href="https://www.jianshu.com/p/1f8107a8778c" target="_blank" rel="noopener">主题进阶优化</a>:其实官方网站有非常详细的优化教程,这个是为了记录别人写的教程;多个思路</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>大佬</tag>
      </tags>
  </entry>
</search>
